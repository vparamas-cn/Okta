"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _configurationValidation = require("@okta/configuration-validation");

var _oktaAuthJs = _interopRequireDefault(require("@okta/okta-auth-js"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var AuthService = /*#__PURE__*/function () {
  function AuthService(config) {
    (0, _classCallCheck2["default"])(this, AuthService);
    var testing = {
      // If the config is undefined, cast it to false
      disableHttpsCheck: !!config.disableHttpsCheck
    }; // normalize authJS config. In this SDK, we allow underscore on certain properties, but AuthJS consistently uses camel case.

    var authConfig = (0, _configurationValidation.buildConfigObject)(config);
    (0, _configurationValidation.assertIssuer)(authConfig.issuer, testing);
    (0, _configurationValidation.assertClientId)(authConfig.clientId);
    (0, _configurationValidation.assertRedirectUri)(authConfig.redirectUri);
    this._oktaAuth = new _oktaAuthJs["default"](authConfig);
    this._oktaAuth.userAgent = "".concat("@okta/okta-react", "/").concat("3.0.8", " ").concat(this._oktaAuth.userAgent);
    this._config = authConfig; // use normalized config

    this._pending = {}; // manage overlapping async calls 

    this.handleAuthentication = this.handleAuthentication.bind(this);
    this.updateAuthState = this.updateAuthState.bind(this);
    this.clearAuthState = this.clearAuthState.bind(this);
    this.emitAuthState = this.emitAuthState.bind(this);
    this.getAuthState = this.getAuthState.bind(this);
    this.getUser = this.getUser.bind(this);
    this.getIdToken = this.getIdToken.bind(this);
    this.getAccessToken = this.getAccessToken.bind(this);
    this.login = this.login.bind(this);
    this.logout = this.logout.bind(this);
    this._convertLogoutPathToOptions = this._convertLogoutPathToOptions.bind(this);
    this.redirect = this.redirect.bind(this);
    this.emit = this.emit.bind(this);
    this.on = this.on.bind(this);
    this.clearAuthState(); // Remove expired token or renew token if autoRenew is true
    // This process will keep authState synced with states in tokenManager

    this.on('expired', this.updateAuthState);
  }

  (0, _createClass2["default"])(AuthService, [{
    key: "getTokenManager",
    value: function getTokenManager() {
      return this._oktaAuth.tokenManager;
    }
  }, {
    key: "handleAuthentication",
    value: function () {
      var _handleAuthentication = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var _yield$this$_oktaAuth, tokens, authState, location;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this._pending.handleAuthentication) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", null);

              case 2:
                _context.prev = 2;
                this._pending.handleAuthentication = true;
                _context.next = 6;
                return this._oktaAuth.token.parseFromUrl();

              case 6:
                _yield$this$_oktaAuth = _context.sent;
                tokens = _yield$this$_oktaAuth.tokens;

                if (tokens.idToken) {
                  this._oktaAuth.tokenManager.add('idToken', tokens.idToken);
                }

                if (tokens.accessToken) {
                  this._oktaAuth.tokenManager.add('accessToken', tokens.accessToken);
                }

                _context.next = 12;
                return this.updateAuthState();

              case 12:
                authState = this.getAuthState();

                if (authState.isAuthenticated) {
                  location = this.getFromUri();
                  window.location.assign(location);
                }

                this._pending.handleAuthentication = null;
                _context.next = 21;
                break;

              case 17:
                _context.prev = 17;
                _context.t0 = _context["catch"](2);
                this._pending.handleAuthentication = null;
                this.emitAuthState({
                  isAuthenticated: false,
                  error: _context.t0,
                  idToken: null,
                  accessToken: null
                });

              case 21:
                return _context.abrupt("return");

              case 22:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[2, 17]]);
      }));

      function handleAuthentication() {
        return _handleAuthentication.apply(this, arguments);
      }

      return handleAuthentication;
    }()
  }, {
    key: "clearAuthState",
    value: function clearAuthState() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.emitAuthState(_objectSpread(_objectSpread({}, AuthService.DEFAULT_STATE), state));
      return;
    }
  }, {
    key: "emitAuthState",
    value: function emitAuthState(state) {
      this._authState = state;
      this.emit('authStateChange', this.getAuthState());
      return;
    }
  }, {
    key: "getAuthState",
    value: function getAuthState() {
      return this._authState;
    }
  }, {
    key: "updateAuthState",
    value: function () {
      var _updateAuthState = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var _this = this;

        var authStateUpdate, accessToken, idToken, isAuthenticated;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!this._pending.authStateUpdate) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return", this._pending.authStateUpdate.promise);

              case 2:
                // create a promise to return in case of multiple parallel requests
                this._pending.authStateUpdate = {};
                this._pending.authStateUpdate.promise = new Promise(function (resolve) {
                  // Promise can only resolve, any error is in the resolve value
                  // and uncaught exceptions make Front SDKs angry
                  _this._pending.authStateUpdate.resolve = resolve;
                }); // copy to return after emitAuthState has cleared the pending object

                authStateUpdate = this._pending.authStateUpdate;
                _context2.prev = 5;
                _context2.next = 8;
                return this.getAccessToken();

              case 8:
                accessToken = _context2.sent;
                _context2.next = 11;
                return this.getIdToken();

              case 11:
                idToken = _context2.sent;

                if (!this._config.isAuthenticated) {
                  _context2.next = 18;
                  break;
                }

                _context2.next = 15;
                return this._config.isAuthenticated();

              case 15:
                _context2.t0 = _context2.sent;
                _context2.next = 19;
                break;

              case 18:
                _context2.t0 = !!(accessToken || idToken);

              case 19:
                isAuthenticated = _context2.t0;
                this._pending.authStateUpdate = null;
                this.emitAuthState({
                  isAuthenticated: isAuthenticated,
                  idToken: idToken,
                  accessToken: accessToken
                });
                _context2.next = 28;
                break;

              case 24:
                _context2.prev = 24;
                _context2.t1 = _context2["catch"](5);
                this._pending.authStateUpdate = null;
                this.emitAuthState({
                  isAuthenticated: false,
                  error: _context2.t1,
                  idToken: null,
                  accessToken: null
                });

              case 28:
                authStateUpdate.resolve();
                return _context2.abrupt("return", authStateUpdate.promise);

              case 30:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[5, 24]]);
      }));

      function updateAuthState() {
        return _updateAuthState.apply(this, arguments);
      }

      return updateAuthState;
    }()
  }, {
    key: "getUser",
    value: function () {
      var _getUser = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
        var accessToken, idToken;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this._oktaAuth.tokenManager.get('accessToken');

              case 2:
                accessToken = _context3.sent;
                _context3.next = 5;
                return this._oktaAuth.tokenManager.get('idToken');

              case 5:
                idToken = _context3.sent;

                if (!(!accessToken || !idToken)) {
                  _context3.next = 8;
                  break;
                }

                return _context3.abrupt("return", idToken ? idToken.claims : undefined);

              case 8:
                return _context3.abrupt("return", this._oktaAuth.token.getUserInfo());

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getUser() {
        return _getUser.apply(this, arguments);
      }

      return getUser;
    }()
  }, {
    key: "getIdToken",
    value: function () {
      var _getIdToken = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
        var idToken;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.prev = 0;
                _context4.next = 3;
                return this._oktaAuth.tokenManager.get('idToken');

              case 3:
                idToken = _context4.sent;
                return _context4.abrupt("return", idToken.idToken);

              case 7:
                _context4.prev = 7;
                _context4.t0 = _context4["catch"](0);
                return _context4.abrupt("return", undefined);

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[0, 7]]);
      }));

      function getIdToken() {
        return _getIdToken.apply(this, arguments);
      }

      return getIdToken;
    }()
  }, {
    key: "getAccessToken",
    value: function () {
      var _getAccessToken = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5() {
        var accessToken;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.prev = 0;
                _context5.next = 3;
                return this._oktaAuth.tokenManager.get('accessToken');

              case 3:
                accessToken = _context5.sent;
                return _context5.abrupt("return", accessToken.accessToken);

              case 7:
                _context5.prev = 7;
                _context5.t0 = _context5["catch"](0);
                return _context5.abrupt("return", undefined);

              case 10:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[0, 7]]);
      }));

      function getAccessToken() {
        return _getAccessToken.apply(this, arguments);
      }

      return getAccessToken;
    }()
  }, {
    key: "login",
    value: function () {
      var _login = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(fromUri, additionalParams) {
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (!this._pending.handleLogin) {
                  _context6.next = 2;
                  break;
                }

                return _context6.abrupt("return");

              case 2:
                this._pending.handleLogin = true; // Update UI pending state

                this.emitAuthState(_objectSpread(_objectSpread({}, this.getAuthState()), {}, {
                  isPending: true
                })); // Save the current url before redirect

                this.setFromUri(fromUri); // will save current location if fromUri is undefined

                _context6.prev = 5;

                if (!this._config.onAuthRequired) {
                  _context6.next = 10;
                  break;
                }

                _context6.next = 9;
                return this._config.onAuthRequired(this);

              case 9:
                return _context6.abrupt("return", _context6.sent);

              case 10:
                _context6.next = 12;
                return this.redirect(additionalParams);

              case 12:
                return _context6.abrupt("return", _context6.sent);

              case 13:
                _context6.prev = 13;
                this._pending.handleLogin = null;
                return _context6.finish(13);

              case 16:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[5,, 13, 16]]);
      }));

      function login(_x, _x2) {
        return _login.apply(this, arguments);
      }

      return login;
    }()
  }, {
    key: "_convertLogoutPathToOptions",
    value: function _convertLogoutPathToOptions(redirectUri) {
      if (typeof redirectUri !== 'string') {
        return redirectUri;
      } // If a relative path was passed, convert to absolute URI


      if (redirectUri.charAt(0) === '/') {
        redirectUri = window.location.origin + redirectUri;
      }

      return {
        postLogoutRedirectUri: redirectUri
      };
    }
  }, {
    key: "logout",
    value: function () {
      var _logout = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7() {
        var options,
            _args7 = arguments;
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                options = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};
                options = this._convertLogoutPathToOptions(options);
                _context7.next = 4;
                return this._oktaAuth.signOut(options);

              case 4:
                this.clearAuthState();

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function logout() {
        return _logout.apply(this, arguments);
      }

      return logout;
    }()
  }, {
    key: "redirect",
    value: function () {
      var _redirect = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8() {
        var additionalParams,
            params,
            _args8 = arguments;
        return _regenerator["default"].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                additionalParams = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};
                // normalize config object
                params = (0, _configurationValidation.buildConfigObject)(additionalParams); // set defaults

                params.responseType = params.responseType || this._config.responseType || ['id_token', 'token'];
                params.scopes = params.scopes || this._config.scopes || ['openid', 'email', 'profile'];
                return _context8.abrupt("return", this._oktaAuth.token.getWithRedirect(params));

              case 5:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function redirect() {
        return _redirect.apply(this, arguments);
      }

      return redirect;
    }()
  }, {
    key: "setFromUri",
    value: function setFromUri(fromUri) {
      // Use current location if fromUri was not passed
      fromUri = fromUri || window.location.href; // If a relative path was passed, convert to absolute URI

      if (fromUri.charAt(0) === '/') {
        fromUri = window.location.origin + fromUri;
      }

      sessionStorage.setItem('secureRouterReferrerPath', fromUri);
    }
  }, {
    key: "getFromUri",
    value: function getFromUri() {
      var referrerKey = 'secureRouterReferrerPath';
      var location = sessionStorage.getItem(referrerKey) || window.location.origin;
      sessionStorage.removeItem(referrerKey);
      return location;
    }
  }, {
    key: "on",
    value: function on(event, callback) {
      var _this2 = this;

      this._oktaAuth.emitter.on(event, callback, this._oktaAuth.emitter);

      return function () {
        _this2._oktaAuth.emitter.off(event, callback);
      };
    }
  }, {
    key: "emit",
    value: function emit(event, message) {
      this._oktaAuth.emitter.emit(event, message);
    }
  }]);
  return AuthService;
}();

AuthService.DEFAULT_STATE = {
  isPending: true,
  isAuthenticated: null,
  idToken: null,
  accessToken: null
};
var _default = AuthService;
exports["default"] = _default;
//# sourceMappingURL=AuthService.js.map